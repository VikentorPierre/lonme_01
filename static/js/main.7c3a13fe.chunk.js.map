{"version":3,"sources":["null.jpg","actions/errorAction.js","actions/types.js","actions/authAction.js","actions/postAction.js","components/chuck/header.jsx","components/include/posts.jsx","components/include/boardCategory.jsx","components/include/userAside.jsx","components/feed/home.jsx","components/routing/PrivateRoute.js","components/auth/signupComponent.jsx","components/auth/signuppage.jsx","components/auth/loginComponent.jsx","components/auth/loginpage.jsx","components/post/postCreate.jsx","components/include/comments.jsx","actions/commentAction.js","components/post/postDetail.jsx","components/routing/Routes.js","reducers/postReducer.js","reducers/errorReducer.js","reducers/authReducer.js","reducers/profileMeta.js","reducers/commentReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","returnErrors","msg","status","type","payload","id","arguments","length","undefined","tokenConfig","getState","token","auth","config","headers","Content-type","getProfileMeta","dispatch","axios","get","then","response","data","catch","error","getPosts","setPostLoading","fetch","res","json","posts","UserAuth","props","react_default","a","createElement","className","react_router_dom","exact","to","onClick","Guest","HeaderNav","_this","this","e","isAuthenticated","logout","Component","connect","state","Posts","post_id","getPostDetail","list","map","post","key","title","concat","_id","text","handleDeleteClick","bind","react","preventDefault","href","profile_meta","_ref","src","defaultUser","alt","username","bio","Home","deletePosts","boardCategory","include_posts","include_userAside","component","_ref$auth","loading","rest","Object","objectWithoutProperties","react_router","assign","render","signupComponent","onSubmit","name","placeholder","value","onChange","email","LoginPage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","passwordConfirm","password","handleFormOnSubmit","assertThisInitialized","handleOnChange","history","push","nextProps","setState","defineProperty","target","_this$state","newUser","registerNewUser","auth_signupComponent","user","err","loginComponent","action","console","log","login","auth_loginComponent","PostCreate","tag","newPost","createPost","Comments","comment","CommentArea","disabled","isDisabled","PostDetail","handleChange","handleClick","handleSubmit","match","params","newComment","postId","addComment","comments_Comments","comments_CommentArea","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","sent","t0","stop","_x","apply","_ref2","_callee2","_context2","_x2","_x3","Routes","path","Register","Login","routing_PrivateRoute","CreatePost","initialState","localStorage","getItem","isLoading","comments","combineReducers","objectSpread","items","filter","setItem","removeItem","middleWare","thunk","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","App","es","header","Boolean","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c3a13fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/null.a04d849c.jpg\";","import { GET_ERRORS, CLEAR_ERRORS } from \"./types\";\n\n// RETURN ERRORS\nexport const returnErrors = (msg, status, id = null) => {\n  return {\n    type: GET_ERRORS,\n    payload: { msg, status, id }\n  };\n};\n\n// CLEAR ERRORS\nexport const clearErrors = () => {\n  return {\n    type: CLEAR_ERRORS\n  };\n};\n","// authentication\nexport const USER_LOADING = \"USER_LOADING\";\nexport const USER_LOADED = \"USER_LOADED\";\n\nexport const USER_INFO_LOADING = \"USER_INFO_LOADING\";\nexport const USER_INFO_GET = \"USER_INFO_GET\";\nexport const AUTH_ERROR = \"AUTH_ERROR\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\n\n// error reducer\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\n\n// Post reducer\nexport const CREATE_POST = \"CREATE_POST\";\nexport const GET_ALL_POSTS = \"GET_ALL_POSTS\";\nexport const GET_POST_DETAIL = \"GET_POST_DETAIL\"\nexport const UPDATE_POST_LIKES = \"UPDATE_POST_LIKES\";\n\n// Comments \nexport const ADD_COMMENT = \"ADD_COMMENT\";\nexport const REMOVE_COMMENT = \"REMOVE_COMMENT\";\nexport const GET_COMMENTS = \"GET_COMMENTS\";\nexport const UPDATE_COMMENT_LIKES = \"UPDATE_COMMENT_LIKES\";\n\nexport const GET_POSTS = \"GET_POSTS\";\nexport const ADD_POST = \"ADD_POST\";\nexport const DELETE_POST = \"DELETE_POST\";\nexport const POST_LOADING = \"POST_LOADING\";\n","import axios from \"axios\";\nimport { returnErrors } from \"./errorAction\";\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_INFO_GET,\n  USER_INFO_LOADING\n} from \"./types\";\n\n// check if we have a token inside the header and return the user for that token\n// second arg :getState: we use it to get access to the token in localstorage\nexport const loadUser = () => (dispatch, getState) => {\n  // set our user loading var to true by dispatch USER_LOADING\n  dispatch({ type: USER_LOADING }); // we call the USER_LOADING reducer\n\n  // pass this token with our request\n  axios\n    .get(\"/api/loadUser\", tokenConfig(getState))\n    .then(response =>\n      dispatch({\n        type: USER_LOADED,\n        payload: response.data\n      })\n    )\n    .catch(error => {\n      dispatch(returnErrors(error.response.data, error.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n};\n\n//registerNewUser\n//@args user's username, password and email decontracture\n// method POST so we need header\nexport const registerNewUser = (user, history) => dispatch => {\n  //make request\n  axios\n    .post(\"api/auth/signup\", user)\n    .then(response => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: response.data\n      });\n      dispatch(getProfileMeta());\n      history.push(\"/\");\n    })\n    .catch(err => {\n      dispatch(\n        returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\n      );\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }); //end catch\n};\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n  const token = getState().auth.token; // goes to the auth reducer and grab the token there and set it to the const\n\n  //setup our axios header\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  //if totken exist then add to header\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};\n//\nexport const login = (user, history) => dispatch => {\n  axios\n    .post(\"api/auth/login\", user)\n    .then(response => {\n      dispatch({ type: LOGIN_SUCCESS, payload: response.data });\n      dispatch(getProfileMeta());\n      history.push(\"/\");\n\n    })\n    .catch(err => {\n      dispatch(\n        returnErrors(err.response.data, err.response.status, \"LOGIN_FAIL\")\n      );\n      dispatch({ type: LOGIN_FAIL });\n    });\n}; // end login\n\n// Logout User\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n};\n\nexport const getProfileMeta = () => (dispatch, getState) => {\n  // set our user loading var to true by dispatch USER_LOADING\n  dispatch({ type: USER_INFO_LOADING }); // we call the USER_LOADING reducer\n\n  // pass this token with our request\n  axios\n    .get(\"/api/profile\", tokenConfig(getState))\n    .then(response =>\n      dispatch({\n        type: USER_INFO_GET,\n        payload: response.data\n      })\n    )\n    .catch(error => {\n      dispatch(returnErrors(error.response.data, error.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n};\n","import axios from \"axios\";\nimport { DELETE_POST, ADD_POST, GET_POSTS, POST_LOADING, CREATE_POST, GET_POST_DETAIL } from \"./types\";\nimport { returnErrors } from \"./errorAction\";\n\nexport const createPost = (newPost, history) => (dispatch, getState) => {\n  axios.post(\"/api/post/createPost\", newPost, tokenConfig(getState)).then(response => {\n    dispatch({\n      type: CREATE_POST,\n      payload: response.data\n    });\n    history.push(\"/\");\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"POST_CREATE_ERROR\"))\n  })\n};\n\nexport const getPostDetail = (post_id) => async dispatch => {\n  try {\n    const res = await axios.get(`/api/post/p/${post_id}`)\n    dispatch({\n      type: GET_POST_DETAIL,\n      payload: res.data\n    })\n\n  } catch (error) {\n    console.log(\"error on getting post detail\");\n    // dispatch({\n    //   type: GET_POST_DETAIL,\n    //   payload: post_id\n    // })\n  }\n};\n\n// Get post\n// export const getPost = id => async dispatch => {\n//   try {\n//     const res = await axios.get(`/api/posts/${id}`);\n\n//     dispatch({\n//       type: GET_POST,\n//       payload: res.data\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: POST_ERROR,\n//       payload: { msg: err.response.statusText, status: err.response.status }\n//     });\n//   }\n// };\n\n\n\n///////////////////////////////////////////////////////////////////////////////////////////\n// export const getPosts = () => {\n//   console.log(\"action dispatch\");\n//   return {\n//     type: GET_POSTS\n//   };\n// };\n\n// export function getPosts() {\n//   return {\n//     type: GET_POSTS\n//   };\n// }\n\n// Get posts\n// export const getPosts = (tag = '') => async dispatch => {\n//   //let val = 'Advice'\n//   dispatch(setPostLoading());\n//   try {\n//     const res = await axios.get(`/api/post/posts/${tag}`)\n//     // const res = await axios.get('/api/post/posts/');\n\n//     dispatch({\n//       type: GET_POSTS,\n//       payload: res.data\n//     });\n//   } catch (err) {\n//     dispatch(returnErrors(err.response.data, err.response.status, \"GET_POSTS_ERROR\"))\n//     //console.log('error getting post ');\n//     // dispatch({\n//     //   //type: POST_ERROR,\n//     //   payload: { msg: err.response.statusText, status: err.response.status }\n//     // });\n//   }\n// };\n\nexport const getPosts = () => dispatch => {\n  dispatch(setPostLoading());\n  //console.log(\"fetching\");\n  fetch(\"https://jsonplaceholder.typicode.com/posts\")\n    .then(res => res.json())\n    .then(posts =>\n      dispatch({\n        type: GET_POSTS,\n        payload: posts\n      })\n    );\n\n  // when we make a call the call return a promise\n  // we use the .then function to catch that promise\n  // we pass the response to the dispatch callback\n  //\"proxy\": \"http://localhost:5000\",\n\n  // axios.get(\"/api/post/posts\").then(response =>\n  //   dispatch({\n  //     type: GET_POSTS,\n  //     payload: response.data\n  //   })\n  // );\n};\n\n// dispatch is thunk\nexport const setPostLoading = () => {\n  return {\n    type: POST_LOADING\n  };\n};\n\n// export const getPosts = () => dispatch => {\n//   dispatch({\n//     type: GET_POSTS\n//   });\n// };\n//@ type tells the action to take\n//@payload pass the arg to that reducer\nexport const deletePosts = id => {\n  return {\n    type: DELETE_POST, // type is the action that the reducer is going to take\n    payload: id // payload is the paremeters pass to the reducer\n  };\n};\n\n\n\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n  const token = getState().auth.token; // goes to the auth reducer and grab the token there and set it to the const\n\n  //setup our axios header\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  //if totken exist then add to header\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport { logout } from \"../../actions/authAction\";\nimport { getPosts } from \"../../actions/postAction\";\n\nimport \"../../css/nav.css\";\n\nfunction UserAuth(props) {\n  return (\n    <div className=\"navbar__bar__links\">\n      <ul>\n        <li>\n          <NavLink exact to=\"/setting/\" className=\"\">\n            Setting\n          </NavLink>\n        </li>\n      </ul>\n      <ul>\n        <li>\n          <NavLink exact to=\"/post/create\" className=\"\">\n            Post\n          </NavLink>\n        </li>\n      </ul>\n      <ul>\n        <li>\n          <NavLink exact to=\"#\" className=\"\" onClick={props.onClick}>\n            Log Out\n          </NavLink>\n        </li>\n      </ul>\n    </div>\n  );\n}\nfunction Guest() {\n  return (\n    <div className=\"navbar__bar__links\">\n      <ul>\n        <li>\n          <NavLink exact to=\"/signup\" className=\"\">\n            Sign Up\n          </NavLink>\n        </li>\n      </ul>\n      <ul>\n        <li>\n          <NavLink exact to=\"/login\" className=\"\">\n            Log In\n          </NavLink>\n        </li>\n      </ul>\n    </div>\n  );\n}\nclass HeaderNav extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {};\n  // }\n\n  render() {\n    return (\n      <header className=\"navbar\">\n        <div className=\"navbar__bar\">\n          <div className=\"navbar__bar__logo\">\n            <NavLink exact to=\"/\" onClick={e => {\n              //e.preventDefault()\n              this.props.getPosts('')\n            }}>\n              <h1>LoneMe </h1>\n            </NavLink>\n            {this.props.auth.isAuthenticated ? (\n              <UserAuth onClick={this.props.logout} />\n            ) : (\n                <Guest />\n              )}\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  auth: state.auth //state.auth.isAuthenticated,\n});\nexport default connect(\n  mapStateToProps,\n  { logout, getPosts }\n)(HeaderNav);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPosts } from \"../../actions/postAction\";\nimport { Link, match } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport \"../../css/post.css\";\nclass Posts extends Component {\n  static propTypes = {\n    getPosts: PropTypes.func.isRequired,\n    posts: PropTypes.array.isRequired,\n    isAuthenticated: PropTypes.bool\n  };\n\n  componentDidMount() {\n    //const { match: { params } } = this.props;\n    this.props.getPosts();\n    //console.log(this.props);\n\n  }\n\n  handleDeleteClick(id) {\n    //this.props.deletePosts(id);\n  }\n  handleLink(post_id) {\n    this.props.getPostDetail(post_id)\n\n  }\n  render() {\n    const list = this.props.posts.posts.map(post => {\n      return (\n        <div className=\"post__body\" key={post.id}>\n          <div className=\"post__body__title \">\n            <Link to=\"#\"> {post.title} </Link>\n          </div>\n          <div className=\"post__body__des\">\n            <Link to={`/p/${post._id}/`}>\n              <h3>{post.text}</h3>\n            </Link>\n          </div>\n          <div className=\"post__subBody\">\n            <span>\n              <Link className=\"poster--link\"> mosdev </Link>\n            </span>\n\n            <Link className=\"post--comments--link\">135 comments</Link>\n\n            <button\n              className=\"post--saved--btn\"\n              onClick={this.handleDeleteClick.bind(this, post.id)}\n            >\n              Save\n            </button>\n          </div>\n        </div>\n      );\n    });\n    return (\n      <div className=\"post--content\">\n        <h1>{list} </h1>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  posts: state.posts\n  //posts: state.posts.items\n});\n// connect take two parameter first is the store state, second is a list of action\nexport default connect(\n  mapStateToProps,\n  { getPosts }\n)(Posts);\n//component -> actions -> reducer -> store\n//So what Brad did was hit click, pass the id to the actions, pass the payload in actions to the reducer, and then into the store\n","import React, { Fragment } from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\nimport { getPosts } from \"../../actions/postAction\";\n\nconst board = (props) => {\n\n  return (\n    <Fragment>\n      <div className=\"board__row\">\n        <span>\n          {/* <button value='others' onClick={e => this.props.getPosts(e.target.value)}> Others </button> */}\n          <Link to=\"/posts/others\" onClick={e => {\n            e.preventDefault()\n            props.getPosts('others')\n          }}> Stories </Link>\n        </span>\n        <span>\n          <Link to=\"#\" onClick={e => {\n            e.preventDefault()\n            props.getPosts('Advice')\n          }}> advice </Link>\n        </span>\n        <span>\n          <a href=\"#\"> Q&A </a>\n        </span>\n      </div>\n      <div className=\"board__row\">\n        <span>\n          <a href=\"#\"> discussion </a>{\" \"}\n        </span>\n        <span>\n          <a href=\"#\"> highlights </a>{\" \"}\n        </span>\n        <span>\n          <a href=\"#\"> what you watching </a>{\" \"}\n        </span>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default connect(null, { getPosts })(board);\n","import React, { Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport defaultUser from \"../../null.jpg\";\n\nconst userAside = ({ profile_meta: { profile_meta } }) => {\n  return (\n    <Fragment>\n      <section className=\"user--aside\">\n        <div className=\"user--header\">\n          <div>\n            <NavLink to=\"/profile/\">\n              <img src={defaultUser} className=\"default--user--img\" alt=\"\" />\n            </NavLink>\n            <NavLink to=\"/profile/\">\n              <h4> {profile_meta.username} </h4>\n            </NavLink>\n            <h3> {profile_meta.bio}</h3>\n          </div>\n        </div>\n      </section>\n      <section className=\"header-ad\">\n        <span>\n          <strong> AD</strong>\n        </span>\n      </section>\n    </Fragment>\n  );\n};\nconst mapStateToProps = state => ({\n  profile_meta: state.profile_meta\n});\nexport default connect(\n  mapStateToProps,\n  null\n)(userAside);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport \"../../css/home.css\";\nimport Post from \"../include/posts\";\nimport HomeBoard from \"../include/boardCategory\";\nimport UserAside from \"../include/userAside\";\nclass Home extends Component {\n  static propTypes = {\n    auth: PropTypes.bool\n  };\n\n  componentDidMount() {}\n  handleDeleteClick(id) {\n    this.props.deletePosts(id);\n  }\n  render() {\n    return (\n      <main className=\"mainContent\">\n        <div className=\"mainContent__wrap\">\n          <div className=\"mainContent__wrap__content\">\n            <div\n              className={\n                this.props.auth.isAuthenticated\n                  ? \"content-left\"\n                  : \"content-center\"\n              }\n            >\n              <section className=\"board\">\n                <HomeBoard />\n              </section>\n              <section className=\"filter\">\n                <span className=\"filter__text\">\n                  <h3> {\"stories:\"} </h3>\n                </span>\n                <span className=\"filter__radio\" />\n              </section>\n\n              <section className=\"post-home\">\n                <Post />\n              </section>\n            </div>\n\n            {this.props.auth.isAuthenticated && (\n              <div className=\"content-right\">\n                <UserAside />{\" \"}\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Home);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst PrivateRoute = ({\n    component: Component,\n    auth: { isAuthenticated, loading },\n    ...rest\n}) => (\n        <Route\n            {...rest}\n            render={props =>\n                !isAuthenticated && !loading ? (\n                    <Redirect to='/login' />\n                ) : (\n                        <Component {...props} />\n                    )\n            }\n        />\n    );\n\nPrivateRoute.propTypes = {\n    auth: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n});\n\nexport default connect(mapStateToProps)(PrivateRoute);","import React from \"react\";\nimport \"../../css/base.css\";\nimport \"../../css/auth.css\";\n\nconst signupComponent = props => {\n  return (\n    <div className=\"inner--auth--form\">\n      <form className=\"auth--form\" onSubmit={props.onSubmit}>\n        <span>\n          <h2 className>Sign Up</h2>\n        </span>\n        <input\n          type=\"text\"\n          name=\"username\"\n          id=\"signup--username\"\n          placeholder=\"Username\"\n          value={props.username}\n          className=\"auth--form__input\"\n          onChange={props.onChange}\n        />\n        <input\n          type=\"email\"\n          name=\"email\"\n          id=\"sifnup--email\"\n          placeholder=\"E-mail\"\n          className=\"auth--form__input\"\n          value={props.email}\n          onChange={props.onChange}\n        />\n        {/* Password */}\n        <input\n          type=\"password\"\n          name=\"password\"\n          id=\"signup--password\"\n          placeholder=\"Password\"\n          className=\"auth--form__input\"\n          onChange={props.onChange}\n        />\n\n        {/* passwordConfirm */}\n        <input\n          type=\"password\"\n          name=\"passwordConfirm\"\n          id=\"\"\n          className=\"auth--form__input\"\n          placeholder=\"Passwor Cornfirm\"\n          onChange={props.onChange}\n        />\n        <div className=\"auth--form__submit\">\n          <button\n          //disabled={this.state.isLoading}\n          >\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default signupComponent;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { registerNewUser } from \"../../actions/authAction\";\nimport { clearErrors } from \"../../actions/errorAction\";\nimport SignUp from \"./signupComponent\";\n\nclass LoginPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      passwordConfirm: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      error: null\n    };\n    this.handleFormOnSubmit = this.handleFormOnSubmit.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n  static propTypes = {\n    isAuthenticated: PropTypes.bool,\n    error: PropTypes.object.isRequired,\n    register: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired\n  };\n  componentDidMount() {\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/\");\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      this.props.history.push(\"/\");\n    }\n    if (nextProps.error) {\n      this.setState({\n        error: nextProps.error.msg\n      });\n    } else {\n      this.setState({ error: null });\n    }\n  }\n  handleOnChange(e) {\n    e.preventDefault();\n    this.setState({ [e.target.name]: e.target.value });\n    //console.log(this.state);\n  }\n  handleFormOnSubmit(e) {\n    e.preventDefault();\n    const { username, email, password, passwordConfirm } = this.state;\n    // new user\n    const newUser = {\n      username: username,\n      email: email,\n      password: password,\n      passwordConfirm: passwordConfirm\n    };\n    this.props.registerNewUser(newUser, this.props.history);\n  }\n  render() {\n    return (\n      <main className=\"mainContent\">\n        <div className=\"mainContent__wrap\">\n          <div className=\"mainContent__wrap__content extraContent\">\n            {this.state.error != null && <div>{this.state.error.username}</div>}\n            {this.state.error != null && <div>{this.state.error.password}</div>}\n            {this.state.error != null && <div>{this.state.error.email}</div>}\n            <SignUp\n              onChange={this.handleOnChange}\n              onSubmit={this.handleFormOnSubmit}\n              email={this.state.email}\n              username={this.state.username}\n            />\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  auth: state.auth, //state.auth.isAuthenticated,\n  error: state.error // state.error the error is coming from the main reducer\n});\n\nexport default connect(\n  mapStateToProps,\n  { registerNewUser }\n)(LoginPage);\n","import React from \"react\";\nimport \"../../css/auth.css\";\nconst loginComponent = props => {\n  return (\n    <div className=\"inner--auth--form\" onSubmit={props.onSubmit}>\n      <form action=\"\" className=\"auth--form \">\n        <span>\n          <h2 className>Login</h2>\n        </span>\n        <input\n          type=\"email\"\n          name=\"email\"\n          id=\"loginEmail\"\n          placeholder=\"E-mail\"\n          className=\"auth--form__input\"\n          onChange={props.onChange}\n        />\n        {/* {errors.email && <span className=\"formError\"> {errors.email}</span>} */}\n        <input\n          type=\"password\"\n          name=\"password\"\n          id=\"loginPassword\"\n          placeholder=\"Password\"\n          className=\"auth--form__input\"\n          onChange={props.onChange}\n        />\n        {/* {errors.password && <span className=\"formError\"> {errors.password}</span>} */}\n        <div className=\"auth--form__submit\">\n          <button\n          //disabled={this.state.isLoading}\n          >\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default loginComponent;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport LoginComponent from \"./loginComponent\";\nimport { login } from \"../../actions/authAction\";\nimport PropTypes from \"prop-types\";\n\nclass LoginPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      error: null\n    };\n    this.handleFormOnSubmit = this.handleFormOnSubmit.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n  static propTypes = {\n    auth: PropTypes.bool,\n    error: PropTypes.object.isRequired,\n    login: PropTypes.func.isRequired,\n    clearErrors: PropTypes.func.isRequired\n  };\n  // componentDidMount() {\n  //   if (this.props.auth.isAuthenticated) {\n  //     this.props.history.push(\"/\");\n  //   }\n  // }\n  componentWillMount() {\n    if (this.props.auth.isAuthenticated) {\n      this.props.history.push(\"/\");\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.auth.isAuthenticated) {\n      this.props.history.push(\"/\");\n    }\n    if (nextProps.error) {\n      this.setState({\n        error: nextProps.error.msg\n      });\n    } else {\n      this.setState({ error: null });\n    }\n  }\n  handleOnChange(e) {\n    e.preventDefault();\n    this.setState({ [e.target.name]: e.target.value });\n    console.log(this.state);\n  }\n  handleFormOnSubmit(e) {\n    e.preventDefault();\n    const { password, email } = this.state;\n    const user = {\n      email,\n      password\n    };\n    this.props.login(user, this.props.history);\n  }\n  render() {\n    return (\n      <main className=\"mainContent\">\n        <div className=\"mainContent__wrap\">\n          <div className=\"mainContent__wrap__content extraContent\">\n            {this.state.error != null && <div>{this.state.error.password}</div>}\n            {this.state.error != null && <div>{this.state.error.email}</div>}\n            <LoginComponent\n              onChange={this.handleOnChange}\n              onSubmit={this.handleFormOnSubmit}\n            />\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  auth: state.auth, //state.auth.isAuthenticated,\n  error: state.error // state.error the error is coming from the main reducer\n});\nexport default connect(\n  mapStateToProps,\n  { login }\n)(LoginPage);\n","import React, { Component } from \"react\";\nimport \"../../css/postCreate.css\";\nimport axios from \"axios\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { createPost } from \"../../actions/postAction\";\nclass PostCreate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      title: \"\",\n      tag: \"\",\n      error: null\n    };\n    this.handleFormOnSubmit = this.handleFormOnSubmit.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n  handleOnChange(e) {\n    e.preventDefault();\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  handleFormOnSubmit(e) {\n    e.preventDefault();\n\n\n    const { text, title, tag } = this.state;\n    // // new Post\n    const newPost = {\n      text,\n      title,\n      tag\n    };\n    this.props.createPost(newPost, this.props.history);\n    //this.props.registerNewUser(newUser, this.props.history);\n  }\n\n  render() {\n    return (\n      <main className=\"mainContent newPost\">\n        <div className=\"mainContent__wrap\">\n          <div className=\"mainContent__wrap__content create--post--content \">\n            <div className=\"inner--container--post\">\n              <div className=\"inner--post--create\">\n                <header>\n                  <h3> post </h3>\n                </header>\n                <form className=\"post--create--form\" onSubmit={this.handleFormOnSubmit}>\n                  <div>\n                    <textarea\n                      type=\"textarea\"\n                      className=\"post--create__title\"\n                      placeholder=\"Title (optional)\"\n                      name=\"title\"\n                      onChange={this.handleOnChange}\n                    />\n                  </div>\n                  <div>\n                    <textarea\n                      className=\"post--create__body\"\n                      type=\"textarea\"\n                      name=\"text\"\n                      onChange={this.handleOnChange}\n                    />\n                  </div>\n                  <div className=\"post--create__footer\">\n                    <select className=\"post--create__tag\" name=\"tag\" id=\"\" onChange={this.handleOnChange}>\n                      <option> pick a tag </option>\n                      <option value=\"Story\"> Story </option>\n                      <option value=\"Advice\"> Advice</option>\n                      <option value=\"others\"> Other </option>\n                    </select>\n                    <input className=\"submit--post\" type=\"submit\" value=\"submit\" />\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  };\n}\n// const mapStateToProps = state => ({\n//   auth: state.auth //state.auth.isAuthenticated,\n// });\n// PostCreate.propTypes = {\n//   //createPost: PropTypes.func.isRequired,\n//   auth: PropTypes.bool\n// };\n//export default postCreate;\nexport default connect(\n  null,\n  { createPost }\n)(PostCreate);\n","import React from \"react\";\nimport \"../../css/comments.css\";\n\nconst Comments = props => {\n  const { comment } = props;\n  return <div className=\"comment__body\">{comment}</div>;\n};\n\nconst CommentArea = props => {\n  //const { myName } = props;\n  return (\n    <div className=\"comment--input--wrap\">\n      <form action=\"#\" className=\"comment--form\" onSubmit={props.onSubmit}>\n        <textarea\n          type=\"text\"\n          name=\"text\"\n          className=\"comment--form__input\"\n          placeholder=\"enter your comment here \"\n          onChange={props.onChange}\n          onClick={props.onClick}\n          disabled={props.isDisabled}\n        />\n        <input className=\"\" type=\"submit\" value=\"submit\" />\n      </form>\n    </div>\n  );\n};\n\nexport { Comments, CommentArea };\n","import { GET_COMMENTS, ADD_COMMENT, REMOVE_COMMENT, UPDATE_COMMENT_LIKES } from \"./types\";\nimport { returnErrors } from \"./errorAction\";\nimport axios from \"axios\";\n// @route    GET api/comment\n// @desc     Get all comments for a post\n// @access   Public\n/*\n    mmake a express api endpoint that gonna handle this request plz.\n*/\nexport const getComments = (post_id) => async dispatch => {\n    try {\n        const res = await axios.get(\"/api/comment\")\n        dispatch({\n            type: GET_COMMENTS,\n            payload: res.data\n        })\n\n    } catch (error) {\n        dispatch(returnErrors(error.response.data, error.response.status, \"GET_COMMENTS_ERROR\"))\n\n    }\n}\n\n// @routes  POST api/comment/addComment\n// @desc    create a new comment for a given post \n// @access  Private \nexport const addComment = (newComment, history) => async (dispatch, getState) => {\n\n    //axios.post(\"/api/comment/addComment\", )\n    try {\n        const res = await axios.post(`/api/comment/addComment`, newComment, tokenConfig(getState))\n        history.push(\"/\");\n\n    } catch (err) {\n        console.log(err)\n        //dispatch(returnErrors(err.response.data, err.response.status, \"ADD_COMMENTS_ERROR\"))\n    }\n}\n\n\n\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n    const token = getState().auth.token; // goes to the auth reducer and grab the token there and set it to the const\n\n    //setup our axios header\n    const config = {\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    };\n\n    //if totken exist then add to header\n    if (token) {\n        config.headers[\"x-auth-token\"] = token;\n    }\n\n    return config;\n};","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Comments, CommentArea } from \"../include/comments\";\nimport { connect } from \"react-redux\";\nimport { getPostDetail } from \"../../actions/postAction\";\nimport { addComment } from \"../../actions/commentAction\";\nimport \"../../css/postDetail.css\";\nclass PostDetail extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isDisabled: true,\n      text: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  componentDidMount() {\n    this.props.getPostDetail(this.props.match.params.id)\n  }\n  handleSubmit(e) {\n    e.preventDefault()\n    const { text } = this.state\n    console.log(text);\n    const newComment = {\n      text: text,\n      postId: this.props.post._id\n    }\n    this.props.addComment(newComment, this.props.history)\n  }\n\n  handleChange(e) {\n    e.preventDefault();\n    this.setState({ [e.target.name]: e.target.value });\n    console.log(this.state);\n    console.log(this.props.post._id);\n\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    //this.setState({ isDisabled: !this.isDisabled });\n    console.log(this.state);\n  }\n\n  render() {\n    return (\n      <main className=\"mainContent\">\n        <div className=\"mainContent__wrap__detail\">\n          <div className=\"mainContent__wrap__content detail\">\n            <section className=\"detailView-post\">\n              <div className=\"post--detail__body\" key={this.props.post['_id']}>\n                <div className=\"post__body__title detail--title\">\n                  <h2>{this.props.post['title']}</h2>\n                </div>\n                <div className=\"post__body__des\">\n\n                  <h3>\n                    {this.props.post['text']}\n                  </h3>\n\n                </div>\n              </div>\n              <div className=\"post__subBody detail--subbody\">\n                <span>\n                  <NavLink className=\"poster--link\"> mosdev </NavLink>{\" \"}\n                </span>\n\n                <NavLink className=\"post--comments--link\">135 comments</NavLink>\n\n                <button className=\"post--saved--btn\">Save</button>\n              </div>\n            </section>\n            <section className=\"post--detail__comment\">\n              <Comments comment=\"this is a comment\" />\n              <Comments comment=\"this is a comment\" />\n              <Comments comment=\"this is a comment\" />\n              <Comments comment=\"this is a comment\" />\n              <Comments comment=\"this is a comment\" />\n              <Comments comment=\"this is a comment\" />\n              <Comments comment=\"this is a comment\" />\n              <Comments comment=\"this is a comment\" />\n            </section>\n          </div>\n          <CommentArea\n            onChange={this.handleChange}\n            onClick={this.handleClick}\n            isDisabled={this.isDisabled}\n            onSubmit={this.handleSubmit}\n          />\n        </div>\n      </main>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  post: state.posts.post\n})\nexport default connect(mapStateToProps, { getPostDetail, addComment })(PostDetail);\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport PrivateRoute from \"./PrivateRoute\";\nimport \"../../css/base.css\";\n//auth routes \nimport Register from \"../auth/signuppage\";\nimport Login from '../auth/loginpage';\n// feed \nimport Feed from \"../feed/home\";\n// post\nimport CreatePost from \"../post/postCreate\";\nimport PostDetail from \"../post/postDetail\";\n\n// import Profiles from '../profiles/Profiles';\n// import Profile from '../profile/Profile';\n// import Posts from '../posts/Posts';\n// import Post from '../post/Post';\n// import NotFound from '../layout/NotFound';\n// import PrivateRoute from '../routing/PrivateRoute';\nconst Routes = () => {\n    return (\n        <Switch>\n            <Route exact path='/signUp' component={Register} />\n            <Route exact path='/login' component={Login} />\n            <Route path=\"/p/:id/\" component={PostDetail} />\n            <PrivateRoute exact path=\"/post/create\" component={CreatePost} />\n\n            {/* <Route exact path='/profiles' component={Profiles} />\n          <Route exact path='/profile/:id' component={Profile} /> */}\n            {/* <PrivateRoute exact path='/dashboard' component={Dashboard} />\n          <PrivateRoute exact path='/create-profile' component={CreateProfile} />\n          <PrivateRoute exact path='/edit-profile' component={EditProfile} />\n          <PrivateRoute exact path='/add-experience' component={AddExperience} />\n          <PrivateRoute exact path='/add-education' component={AddEducation} />\n          <PrivateRoute exact path='/posts' component={Posts} />\n          <PrivateRoute exact path='/posts/:id' component={Post} />\n          <Route component={NotFound} /> */}\n        </Switch>\n    );\n};\n\nexport default Routes;","import {\n  DELETE_POST,\n  ADD_POST,\n  GET_POSTS,\n  POST_LOADING,\n  CREATE_POST,\n  GET_POST_DETAIL\n} from \"../actions/types\";\nconst initialState = {\n  //items: [],\n  posts: [],\n  post: {},\n  // error: {},\n  loading: true\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case CREATE_POST:\n      return {\n        ...state,\n        post: action.payload,\n        loading: false\n      };\n    case GET_POSTS:\n      //console.log(\"state\" + state.item);\n      return {\n        ...state,\n        posts: action.payload,\n        loading: false\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        items: state.items.filter(post => post.id !== action.payload)\n      };\n    case POST_LOADING:\n      return {\n        ...state,\n        loading: true\n      };\n    case GET_POST_DETAIL:\n      return {\n        ...state,\n        post: action.payload\n\n      }\n    // case ADD_POST:\n    //   return {\n    //     ...state,\n    //     posts: [action.payload, ...state.items]\n    //   };\n    default:\n      return state;\n  }\n}\n","import { GET_ERRORS, CLEAR_ERRORS } from \"../actions/types\";\n\nconst initialState = {\n  msg: {},\n  status: null,\n  id: null\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case GET_ERRORS:\n      return {\n        msg: action.payload.msg,\n        status: action.payload.status,\n        id: action.payload.id\n      };\n    case CLEAR_ERRORS:\n      return {\n        msg: {},\n        status: null,\n        id: null\n      };\n\n    default:\n      return {\n        ...state\n      };\n  }\n}\n","import {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from \"../actions/types\";\n\nconst initialState = {\n  token: localStorage.getItem(\"token\"),\n  isAuthenticated: null,\n  isLoading: false,\n  user: {}\n  //user: null\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case USER_LOADING:\n      return {\n        ...state,\n        isLoading: true\n      };\n    case USER_LOADED:\n      return {\n        ...state,\n        isAuthenticated: true,\n        isLoading: false,\n        user: action.payload\n      };\n    case LOGIN_SUCCESS:\n    case REGISTER_SUCCESS:\n      localStorage.setItem(\"token\", action.payload.token);\n      return {\n        ...state,\n        ...action.payload,\n        //user: action.payload,\n        // ...action.payload,\n        isAuthenticated: true,\n        isLoading: false\n      };\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case LOGOUT_SUCCESS:\n    case REGISTER_FAIL:\n      localStorage.removeItem(\"token\");\n      return {\n        ...state,\n        token: null,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  USER_INFO_LOADING,\n  USER_INFO_GET,\n  LOGOUT_SUCCESS\n} from \"../actions/types\";\n\nconst initialState = {\n  isLoading: false,\n  profile_meta: {}\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case USER_INFO_LOADING:\n      return {\n        ...state,\n        isLoading: true\n      };\n    case USER_INFO_GET:\n      return {\n        ...state,\n        profile_meta: action.payload,\n        isLoading: false\n      };\n    case LOGOUT_SUCCESS:\n      return {\n        profile_meta: {}\n      };\n\n    default:\n      return {\n        ...state\n      };\n  }\n}\n","import { GET_COMMENTS, ADD_COMMENT, REMOVE_COMMENT, UPDATE_COMMENT_LIKES } from \"../actions/types\";\nconst initialState = {\n    comments: [],\n    loading: true\n};\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_COMMENTS:\n            return {\n                ...state,\n                comments: action.payload,\n                loading: false\n            }\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport postReducer from \"./postReducer\";\nimport errorReducer from \"./errorReducer\";\nimport authReducer from \"./authReducer\";\nimport profile from \"./profileMeta\";\nimport commentReducer from \"./commentReducer\";\n\n\nexport default combineReducers({\n  posts: postReducer,\n  error: errorReducer,\n  auth: authReducer,\n  profile_meta: profile,\n  comment: commentReducer\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst initialState = {};\n\nconst middleWare = [thunk];\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeEnhancers(applyMiddleware(...middleWare))\n);\n\nexport default store;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./css/base.css\";\nimport Navbar from \"./components/chuck/header\";\nimport Home from \"./components/feed/home\";\n// import Login from \"./components/auth/loginpage\";\n// import Sign from \"./components/auth/signuppage\";\nimport { connect } from \"react-redux\";\n\n//profile\n// import {\n//   Profile,\n//   ProfileGoals,\n//   ProfileLikes,\n//   ProfileStories\n// } from \"./components/profile/prof\";\n// //post\n// import CreatePost from \"./components/post/postCreate\";\n// import NewPost from \"./components/include/newPost\";\n\n// // auth\n// import LoginPage from \"./components/include/loginpage\";\n// import SignupPage from \"./components/include/signuppage\";\n//import Profile from \"./components/profile\";\n// import Setting from \"./components/setting\";\n// import PostDetail from \"./components/post/postDetail\";\n//import Home from \"./components/feed/home\";\nimport Routes from \"./components/routing/Routes\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { loadUser, getProfileMeta } from \"./actions/authAction\";\n//import Home from \"./components/feed/home\";\n\nclass App extends Component {\n  //run this code everytime to get the user from the token\n  componentDidMount() {\n    store.dispatch(loadUser());\n    store.dispatch(getProfileMeta());\n  }\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <div className=\"App\">\n            <Navbar />\n            <Switch>\n              <Route exact path='/' component={Home} />\n              {/* <Route exact={true} path=\"/login\" component={Login} />\n              <Route exact={true} path=\"/signUp\" component={Sign} /> */}\n\n              <Route component={Routes} />\n            </Switch>\n            {/* Feed */}\n            {/* <Route exact={true} path=\"/\" component={Home} /> */}\n            {/* Auth  */}\n            {/* <Route exact={true} path=\"/login\" component={LoginPage} />\n            <Route exact={true} path=\"/signup\" component={SignupPage} /> */}\n            {}\n            {/* Profile */}\n            {/* <Route exact={true} path=\"/profile\" component={Profile} />\n            <Route path=\"/profile/goals\" component={ProfileGoals} />\n            <Route path=\"/profile/stories/\" component={ProfileStories} />\n            <Route path=\"/profile/like\" component={ProfileLikes} /> */}\n            {/* Post */}\n            {/* <Route path=\"/p/:id/\" component={PostDetail} />\n            <Route exact={true} path=\"/post/create\" component={CreatePost} /> */}\n            {/* Setting */}\n            {/* <Route path=\"/setting/\" component={Setting} /> */}\n          </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import { Provider } from \"react-redux\";\n// import store from \"./store\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}